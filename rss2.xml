<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>永远的万事屋</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>做海贼王的油腻男人</description>
    <pubDate>Mon, 06 Jul 2020 06:28:23 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>解释器模式</title>
      <link>http://yoursite.com/2020/07/06/2020-7/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <guid>http://yoursite.com/2020/07/06/2020-7/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Mon, 06 Jul 2020 03:09:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;模式的定义与特点&quot;&gt;&lt;a href=&quot;#模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;模式的定义与特点&quot;&gt;&lt;/a&gt;模式的定义与特点&lt;/h2&gt;&lt;p&gt;解释器（Interpreter）模式的定义：给分析对象定义一个语言，并定义该语言的文法表示，
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="模式的定义与特点"><a href="#模式的定义与特点" class="headerlink" title="模式的定义与特点"></a>模式的定义与特点</h2><p>解释器（Interpreter）模式的定义：给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解析器来解释语言中的句子。也就是说，用编译语言的方式来分析应用中的实例。这种模式实现了文法表达式处理的接口，该接口解释一个特定的上下文。</p><p>这里提到的文法和句子的概念同编译原理中的描述相同，“文法”指语言的语法规则，而“句子”是语言集中的元素。例如，汉语中的句子有很多，“我是中国人”是其中的一个句子，可以用一棵语法树来直观地描述语言中的句子。</p><p>解释器模式是一种类行为型模式，其主要优点如下。</p><ol><li>扩展性好。由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。</li><li>容易实现。在语法树中的每个表达式节点类都是相似的，所以实现其文法较为容易。</li></ol><p>解释器模式的主要缺点如下。</p><ol><li>执行效率较低。解释器模式中通常使用大量的循环和递归调用，当要解释的句子较复杂时，其运行速度很慢，且代码的调试过程也比较麻烦。</li><li>会引起类膨胀。解释器模式中的每条规则至少需要定义一个类，当包含的文法规则很多时，类的个数将急剧增加，导致系统难以管理与维护。</li><li>可应用的场景比较少。在软件开发中，需要定义语言文法的应用实例非常少，所以这种模式很少被使用到。</li></ol><h2 id="模式的结构与实现"><a href="#模式的结构与实现" class="headerlink" title="模式的结构与实现"></a>模式的结构与实现</h2><p>解释器模式包含以下主要角色。</p><ol><li>抽象表达式（Abstract Expression）角色：定义解释器的接口，约定解释器的解释操作，主要包含解释方法 interpret()。</li><li>终结符表达式（Terminal    Expression）角色：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应。</li><li>非终结符表达式（Nonterminal Expression）角色：也是抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。</li><li>环境（Context）角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。</li><li>客户端（Client）：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>前面介绍了解释器模式的结构与特点，下面分析它的应用场景。</p><ol><li>当语言的文法较为简单，且执行效率不是关键问题时。</li><li>当问题重复出现，且可以用一种简单的语言来进行表达时。</li><li>当一个语言需要解释执行，并且语言中的句子可以表示为一个抽象语法树的时候，如 XML 文档解释。</li></ol><p>注意：解释器模式在实际的软件开发中使用比较少，因为它会引起效率、性能以及维护等问题。如果碰到对表达式的解释，在 Java 中可以用 Expression4J 或 Jep 等来设计。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/07/06/2020-7/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>备忘录模式</title>
      <link>http://yoursite.com/2020/07/06/2020-7/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</link>
      <guid>http://yoursite.com/2020/07/06/2020-7/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Mon, 06 Jul 2020 02:11:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;模式的定义与特点&quot;&gt;&lt;a href=&quot;#模式的定义与特点&quot; class=&quot;headerlink&quot; title=&quot;模式的定义与特点&quot;&gt;&lt;/a&gt;模式的定义与特点&lt;/h2&gt;&lt;p&gt;备忘录（Memento）模式的定义：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="模式的定义与特点"><a href="#模式的定义与特点" class="headerlink" title="模式的定义与特点"></a>模式的定义与特点</h2><p>备忘录（Memento）模式的定义：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。该模式又叫快照模式。</p><p>备忘录模式是一种对象行为型模式，其主要优点如下。</p><ol><li>提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态。</li><li>实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息。</li><li>简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理，这符合单一职责原则。</li></ol><p>其主要缺点是：资源消耗大。如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。</p><h2 id="模式的结构与实现"><a href="#模式的结构与实现" class="headerlink" title="模式的结构与实现"></a>模式的结构与实现</h2><p>备忘录模式的主要角色如下。</p><ol><li>发起人（Originator）角色：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。</li><li>备忘录（Memento）角色：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。</li><li>管理者（Caretaker）角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。</li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>需要保存/恢复数据的相关状态场景。</li><li>提供一个可回滚的操作。</li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>其实这个模式本身三个角色很简单，当我们遇到一个场景时，很容易想到创建一个类用于存储内部状态，这个我们可能会很自然的将状态的访问与修改也放在了此类中。这里有单独的Caretaker角色，其职责就是封装对备忘录的操作，将对Memento访问与修改的职责划分到Caretaker，Memento只负责对状态的存储与访问，这样也比较符合单一职责原则。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/07/06/2020-7/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>访问者模式</title>
      <link>http://yoursite.com/2020/07/01/2020-6/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <guid>http://yoursite.com/2020/07/01/2020-6/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Wed, 01 Jul 2020 02:41:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;定义与特点&quot;&gt;&lt;a href=&quot;#定义与特点&quot; class=&quot;headerlink&quot; title=&quot;定义与特点&quot;&gt;&lt;/a&gt;定义与特点&lt;/h2&gt;&lt;p&gt;访问者（Visitor）模式的定义：将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="定义与特点"><a href="#定义与特点" class="headerlink" title="定义与特点"></a>定义与特点</h2><p>访问者（Visitor）模式的定义：将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作，为数据结构中的每个元素提供多种访问方式。它将对数据的操作与数据结构进行分离，是行为类模式中最复杂的一种模式。</p><p>访问者（Visitor）模式是一种对象行为型模式，其主要优点如下。</p><ol><li>扩展性好。能够在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。</li><li>复用性好。可以通过访问者来定义整个对象结构通用的功能，从而提高系统的复用程度。</li><li>灵活性好。访问者模式将数据结构与作用于结构上的操作解耦，使得操作集合可相对自由地演化而不影响系统的数据结构。</li><li>符合单一职责原则。访问者模式把相关的行为封装在一起，构成一个访问者，使每一个访问者的功能都比较单一。</li></ol><p>访问者（Visitor）模式的主要缺点如下。</p><ol><li>增加新的元素类很困难。在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”。</li><li>破坏封装。访问者模式中具体元素对访问者公布细节，这破坏了对象的封装性。</li><li>违反了依赖倒置原则。访问者模式依赖了具体类，而没有依赖抽象类。</li></ol><h2 id="模式的结构"><a href="#模式的结构" class="headerlink" title="模式的结构"></a>模式的结构</h2><p>访问者模式包含以下主要角色。</p><ol><li>抽象访问者（Visitor）角色：定义一个访问具体元素的接口，为每个具体元素类对应一个访问操作 visit() ，该操作中的参数类型标识了被访问的具体元素。</li><li>具体访问者（ConcreteVisitor）角色：实现抽象访问者角色中声明的各个访问操作，确定访问者访问一个元素时该做什么。</li><li>抽象元素（Element）角色：声明一个包含接受操作 accept() 的接口，被接受的访问者对象作为 accept() 方法的参数。</li><li>具体元素（ConcreteElement）角色：实现抽象元素角色提供的 accept() 操作，其方法体通常都是 visitor.visit(this) ，另外具体元素中可能还包含本身业务逻辑的相关操作。</li><li>对象结构（Object Structure）角色：是一个包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法，通常由 List、Set、Map 等聚合类实现。</li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>对象结构（指的是Object Structure）比较稳定，但经常需要在此对象结构上定义新的操作。</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免这些操作“污染”这些对象的类，也不希望在增加新操作时修改这些类。</li></ol><h3 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h3><p>我目前对于此模式的场景还是陌生的（最大的可能是我见识的少⊙ω⊙），一般的场景中容器的元素都是同一种具体类型，很少遇到容器中的元素是同一种接口类型的不同具体类型的情况，希望后面能够遇到此情景然后有所触动。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/07/01/2020-6/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>迭代器模式</title>
      <link>http://yoursite.com/2020/07/01/2020-6/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <guid>http://yoursite.com/2020/07/01/2020-6/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Wed, 01 Jul 2020 02:41:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;定义与特点&quot;&gt;&lt;a href=&quot;#定义与特点&quot; class=&quot;headerlink&quot; title=&quot;定义与特点&quot;&gt;&lt;/a&gt;定义与特点&lt;/h2&gt;&lt;p&gt;迭代器（Iterator）模式的定义：提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。迭代
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="定义与特点"><a href="#定义与特点" class="headerlink" title="定义与特点"></a>定义与特点</h2><p>迭代器（Iterator）模式的定义：提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。迭代器模式是一种对象行为型模式，其主要优点如下。</p><ol><li>访问一个聚合对象的内容而无须暴露它的内部表示。</li><li>遍历任务交由迭代器完成，这简化了聚合类。</li><li>它支持以不同方式遍历一个聚合，甚至可以自定义迭代器的子类以支持新的遍历。</li><li>增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li><li>封装性良好，为遍历不同的聚合结构提供一个统一的接口。</li></ol><p>其主要缺点是：增加了类的个数，这在一定程度上增加了系统的复杂性。</p><h2 id="模式的结构"><a href="#模式的结构" class="headerlink" title="模式的结构"></a>模式的结构</h2><p>迭代器模式是通过将聚合对象的遍历行为分离出来，抽象成迭代器类来实现的，其目的是在不暴露聚合对象的内部结构的情况下，让外部代码透明地访问聚合的内部数据。现在我们来分析其基本结构与实现方法。</p><p>迭代器模式主要包含以下角色。</p><ol><li>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合对象以及创建迭代器对象的接口。</li><li>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</li><li>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、first()、next() 等方法。</li><li>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>访问一个聚合对象的内容而无须暴露它的内部表示。 </li><li>需要为聚合对象提供多种遍历方式。 </li><li>为遍历不同的聚合结构提供一个统一的接口。</li></ol><h3 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h3><p>绝大多数的场景我们使用语言自带的数据结构与迭代器就可以了，但也有些场景是特定的数据结构并且规定了特定的访问顺序，这个时候可能才是我们使用迭代器模式的场景。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/07/01/2020-6/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>中介者模式</title>
      <link>http://yoursite.com/2020/06/30/2020-6/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <guid>http://yoursite.com/2020/06/30/2020-6/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Tue, 30 Jun 2020 12:09:48 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;定义与特点&quot;&gt;&lt;a href=&quot;#定义与特点&quot; class=&quot;headerlink&quot; title=&quot;定义与特点&quot;&gt;&lt;/a&gt;定义与特点&lt;/h2&gt;&lt;p&gt;中介者（Mediator）模式的定义：定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="定义与特点"><a href="#定义与特点" class="headerlink" title="定义与特点"></a>定义与特点</h2><p>中介者（Mediator）模式的定义：定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p><p>中介者模式是一种对象行为型模式，其主要优点如下。</p><ol><li>降低了对象之间的耦合性，使得对象易于独立地被复用。</li><li>将对象间的一对多关联转变为一对一的关联，提高系统的灵活性，使得系统易于维护和扩展</li></ol><h2 id="模式的结构"><a href="#模式的结构" class="headerlink" title="模式的结构"></a>模式的结构</h2><p>中介者模式包含以下主要角色。</p><ol><li>抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。</li><li>具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</li><li>抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。</li><li>具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。</li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li></ol><h2 id="对比理解"><a href="#对比理解" class="headerlink" title="对比理解"></a>对比理解</h2><h3 id="中介者模式与代理模式"><a href="#中介者模式与代理模式" class="headerlink" title="中介者模式与代理模式"></a>中介者模式与代理模式</h3><p>中介者与代理初看有些相似，其实区别很大。中介者用于管理对象之间的复杂关系，本质是中继两者之间的交互，代理是将请求委托给被代理者。</p><h3 id="中介者与防腐层"><a href="#中介者与防腐层" class="headerlink" title="中介者与防腐层"></a>中介者与防腐层</h3><p>防腐层是为了解决两个上下文之间的紧耦合导致的系统变动成本过高问题，它的职责是将某个模型或者契约中的概念对象及其行为转换到另一个模型或者契约中。</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2020/06/30/2020-6/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
